(def in (pipes/station))
(def out (pipes/log))
(def id (pipes/splitter {:id (-> :-state :-id) :msg (str (-> :-state :-id) " - " :-next)}
                             {:id (rand-int 1000) :msg "init"}))
(| in id)
(| id out)
(defmodule logger {:sources {:logger-in in}})

(def logger-mod (logger "use1"))
(def log-pipe (-> logger-mod :-sources :-logger-in))

(def tester (pipes/station))
(def tester2 (pipes/station))
(| tester (log-pipe {}))

;doesn't work
(def logger2-mod (logger "use2"))
(def log2-pipe (-> logger2-mod :-sources :-logger-in))
(| tester (log2-pipe {}))
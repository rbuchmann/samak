(def in (pipes/station))
(def out (pipes/log))
(def id (pipes/splitter {:id (-> :-state :-id) :msg (str (-> :-state :-id) " - " :-next)}
                             {:id (rand-int 1000) :msg "init"}))
(| in id)
(| id out)
(defmodule logger {:sources {:logger-in in}})

(def use-in (pipes/station))
(defmodule use {:depends {:log-use logger} :sources {:use-in use-in}})

(def logger-mod (logger "from use"))
(def log-use (-> logger-mod :-sources :-logger-in))
(def logger-mod2 (logger "from use2"))
(def log-use2 (-> logger-mod2 :-sources :-logger-in))

(def log-pipe (log-use "pipe1"))
(def log-pipe2 (log-use2 "pipe2"))

(| use-in log-pipe)
(| use-in log-pipe2)

(def use-mod (use "from main"))
(def use-pipe (-> use-mod :-sources :-use-in))

(def tester (pipes/station))
(| tester (use-pipe "main"))
